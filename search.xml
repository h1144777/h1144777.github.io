<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>200216-學習紀錄-ES6-箭頭函式基本認識</title>
      <link href="/2020/02/16/200216-%E7%AE%AD%E9%A0%AD%E5%87%BD%E5%BC%8F%E5%9F%BA%E6%9C%AC%E8%AA%8D%E8%AD%98/"/>
      <url>/2020/02/16/200216-%E7%AE%AD%E9%A0%AD%E5%87%BD%E5%BC%8F%E5%9F%BA%E6%9C%AC%E8%AA%8D%E8%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>箭頭函式(尚未看完)<br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/arrow_function.html" target="_blank" rel="noopener">https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/arrow_function.html</a></p><p>鐵人賽：箭頭函式 (Arrow functions)  (尚未看完)<br><a href="https://wcc723.github.io/javascript/2017/12/21/javascript-es6-arrow-function/" target="_blank" rel="noopener">https://wcc723.github.io/javascript/2017/12/21/javascript-es6-arrow-function/</a></p><p>彭彭課程-箭頭函式 (Youtube會員)<br> <a href="https://training.pada-x.com/online_premium.htm" target="_blank" rel="noopener">https://training.pada-x.com/online_premium.htm</a></p> <a id="more"></a><h2 id="1-參數列表-gt-回傳值"><a href="#1-參數列表-gt-回傳值" class="headerlink" title="1.(參數列表)=&gt;(回傳值)"></a>1.(參數列表)=&gt;(回傳值)</h2><p>//傳統的函式宣告<br>let add=function(n1+n2){<br>    return n1+n2;<br>};</p><p>//箭頭函式的寫法1<br>let add=(n1,n2)=&gt;{<br>    return n1+n2;<br>};</p><h2 id="2-參數列表-gt-函式內部程式"><a href="#2-參數列表-gt-函式內部程式" class="headerlink" title="2.(參數列表)=&gt;{函式內部程式}"></a>2.(參數列表)=&gt;{函式內部程式}</h2><p>//傳統的函示宣告<br>let add=function(n1+n2){<br>    return n1+n2;<br>};</p><p>//箭頭函式的寫法2<br>let add=(n1,n2)=&gt;{<br>    return n1+n2;<br>};</p><h2 id="延伸範例"><a href="#延伸範例" class="headerlink" title="延伸範例:"></a>延伸範例:</h2><p>1.<br>  let f=()=&gt;(5);    //f=5<br>  let result=f();   //回傳5放進result中<br>  console.log(result);<br>  //請問result變數中的資料是?<br>  //result=5<br>2.<br>  let f=(message)=&gt;{<br>      console.log(message);   //目前會顯示undifined 因為沒有回傳值<br>  };<br>  f(“Hello,Arrow”);<br>  //請問呼叫f函式之後的效果是?<br>  //呼叫函式中，因為()內有加入資料,所以會回傳並透過console.log顯示 Hello,Arrow</p><h2 id="匿名函式"><a href="#匿名函式" class="headerlink" title="匿名函式:"></a>匿名函式:</h2><p>//在排程中使用”傳統方式”撰寫”匿名函式”<br>   setTimeout(function(){<br>       console.log(“過了一秒”);<br>   },1000);</p><p>//在排程中使用”箭頭函式”，撰寫”匿名函式”<br>   setTimeout(()=&gt;{<br>       console.log(“過了一秒”);<br>   },1000);</p>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200213-詳解let、const、var的差異 (JS ES6)</title>
      <link href="/2020/02/13/200213-%E8%A9%B3%E8%A7%A3let%E3%80%81const%E3%80%81var%E7%9A%84%E5%B7%AE%E7%95%B0/"/>
      <url>/2020/02/13/200213-%E8%A9%B3%E8%A7%A3let%E3%80%81const%E3%80%81var%E7%9A%84%E5%B7%AE%E7%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>彭彭課程-詳解let、const、var的差異 (Youtube會員)<br> <a href="https://training.pada-x.com/online_premium.htm" target="_blank" rel="noopener">https://training.pada-x.com/online_premium.htm</a><br>[ES6-重點紀錄] 宣告方式 let、const<br><a href="https://ithelp.ithome.com.tw/articles/10192677" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10192677</a><br>變數與常數<br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/var_const_naming.html" target="_blank" rel="noopener">https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/var_const_naming.html</a><br>[筆記] JavaScript ES6 中使用 const 宣告常數<br><a href="https://pjchender.blogspot.com/2017/01/const.html" target="_blank" rel="noopener">https://pjchender.blogspot.com/2017/01/const.html</a></p><a id="more"></a><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>使用var宣告變數，變數的scope(範圍)以函式區塊分界。<br>程式片段一:</p><pre><code>for(var i=0;i&lt;3;i++){            console.log(i)          }        console.log(i)  //印出3</code></pre><p>雖然i宣告在for迴圈內，但for為判斷式，此程式片段都還是屬於在同一範圍，所以可以叫出i。</p><p>程式片段二:</p><pre><code>function test(){    for(var i=0;i&lt;3;i++){            console.log(i)             }        }console.log(i)  //錯誤，找不到變數i</code></pre><p>此程式片段有函式，函式內為一個scope，函式外為另一個scope，i宣告在函式內，所以函式外的<br>i找不到變數。    </p><hr><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>使用let宣告變數，分界較嚴格，變數的scope以程式區塊(大括號)分界<br>程式片段一:</p><pre><code>for(let i=0;i&lt;3;i++){            console.log(i)          }        console.log(i)  //錯誤 找不到變數i</code></pre><p>程式片段二:<br>    function test(){<br>        for(let i=0;i&lt;3;i++){<br>        console.log(i)<br>       }<br>    }<br>    console.log(i)  //錯誤，找不到變數i</p><p>使用let宣告變數，不僅函式會產生區隔，連判斷式(ex:for…)也會產生新的scope</p><hr><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>使用const宣告常數，常數的資料不能變動<br>例如:</p><pre><code>var v=3;v=&quot;Hello World&quot;;  //變數中的資料可變動let l;    //宣告變數可以暫時不給資料l=0;      //變數中的資料可變動const x;  //錯誤，常數宣告時一定要給資料const c=100;  //正確，宣告常數，同時給定資料c=50;     //錯誤，不能更動常數中的資料</code></pre><h2 id="使用-const-在宣告陣列或物件時需要留意的地方"><a href="#使用-const-在宣告陣列或物件時需要留意的地方" class="headerlink" title="使用 const 在宣告陣列或物件時需要留意的地方"></a>使用 const 在宣告陣列或物件時需要留意的地方</h2><p>1.當用const宣告常數，並用push推入一個陣列的值時，並不會有錯誤的情形。</p><p>  const arr= [“Hello”, “h1144777”]<br>  console.log(arr);  // [“Hello”, “h1144777”]</p><p>  arr.push(“welcome”)<br>  console.log(arr);// [“Hello”, “h1144777”, “welcome”]</p><p>  因為在JS中陣列(array)和物件(object)皆屬於 “參考型別(reference type)” &lt;=待學習,<br>  仍然指稱到的是同一個記憶體位置，同樣道理，如果使用的是物件(object)，一樣不會有錯誤<br>  的情形產生。</p><p>2.如果使用object literal( 大括號{} )的方式修改物件內容，對於JS引擎來說等於建立新物<br>件，也就是他會將這個物件存到另一個記憶體位置，就是這個常數的值改變了，就會出現錯誤訊息</p><p>物件部分:<br>const obj = {<br>    name: “h1144777”<br>}<br>console.log(obj);  // {name:h1144777}</p><p>obj = {<br>    name: “abcd”<br>}<br>console.log(obj);  //錯誤</p><p>陣列部分:<br>const arr = [23, 24, 25];<br>console.log(arr);  //[23, 24, 25]</p><p>arr = [34, 35, 36];<br>console.log(arr);  //錯誤</p>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200213-加入Disqus留言板</title>
      <link href="/2020/02/13/200213-%E5%8A%A0%E5%85%A5Disqus%E7%95%99%E8%A8%80%E6%9D%BF/"/>
      <url>/2020/02/13/200213-%E5%8A%A0%E5%85%A5Disqus%E7%95%99%E8%A8%80%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p><a href="https://chenlifei.tech/posts/8838407/" target="_blank" rel="noopener">https://chenlifei.tech/posts/8838407/</a><br>申請Disqus教學</p><p><a href="https://www.wpchen.net/zh/posts/disqus#_Disqus-4" target="_blank" rel="noopener">https://www.wpchen.net/zh/posts/disqus#_Disqus-4</a><br>更改留言板語系</p><a id="more"></a><p>1.進入Disqus官網申請帳號並設定shortname<br>2.開啟佈景主題Next內的_config.yml設定Disqus (主題內建)<br>3.找到Disqus.swig 並修改留言板語系</p>]]></content>
      
      
      <categories>
          
          <category> BLOG更新 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> BLOG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200211-學習紀錄 函式的綁定物件this進階</title>
      <link href="/2020/02/11/200211-this%E9%80%B2%E9%9A%8E/"/>
      <url>/2020/02/11/200211-this%E9%80%B2%E9%9A%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>JavaScript 網頁前端工程進階：函式的綁定物件 this - 進階篇</p><p><a href="https://www.youtube.com/watch?v=NHliVGQef-4&amp;list=PL-g0fdC5RMbpz9X__H5ycq1XcXxhfb5rk&amp;index=16&amp;t=411s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=NHliVGQef-4&amp;list=PL-g0fdC5RMbpz9X__H5ycq1XcXxhfb5rk&amp;index=16&amp;t=411s</a></p><a id="more"></a><p>函式呼叫<br>1.基本呼叫:<br>    函式名稱(參數資料)<br>2.使用apply呼叫函式:<br>    函式名稱.apply(綁定物件,[參數資料,…])<br>3.使用call呼叫函式<br>    函式名稱.call(綁定物件,參數資料…)    </p><p>this代表函式的”綁定物件”，通常在函式中使用<br>不同的程式碼脈絡下，”綁定函式”代表不同的東西</p><p>基礎:了解綁定物件在不同基本脈絡下的變化<br>情況一:獨立的函式<br>情況二:物件的方法<br>情況三:事件處理函式<br>情況四:建構函式</p><h1 id="進階-自訂的綁定物件"><a href="#進階-自訂的綁定物件" class="headerlink" title="進階:自訂的綁定物件"></a>進階:自訂的綁定物件</h1><hr><h2 id="使用-bind-重新綁定物件"><a href="#使用-bind-重新綁定物件" class="headerlink" title="使用 bind 重新綁定物件"></a>使用 bind 重新綁定物件</h2><pre><code>function test(){    console.log(&quot;綁定物件&quot;,this);}test();      //此時this綁定物件為windowlet test2=test.bind({x:3});test2();     //重新綁定後舊物件會被覆蓋  此時this綁定物件為{x:3}  let test3=test.bind(document);test3();     //重新綁定後舊物件會被覆蓋  此時this綁定物件為document</code></pre><h2 id="使用-apply-呼叫函式，可自己設定綁定物件"><a href="#使用-apply-呼叫函式，可自己設定綁定物件" class="headerlink" title="使用 apply 呼叫函式，可自己設定綁定物件"></a>使用 apply 呼叫函式，可自己設定綁定物件</h2><pre><code>function add(n1, n2){     console.log(&quot;結果&quot;, n1+n2);    //結果7     console.log(&quot;綁定物件&quot;, this);    //綁定物件window}add(3,4);    //基本的函式呼叫，無法自己設定綁定物件add.apply({y:4},[4, 5]); //{y:4}為綁定物件，[4, 5]為陣列，代表原來參數，4放到n1，5放到n2add.apply(document, [5, 6]);   //綁定物件為document,n1為5,n2為6</code></pre><h2 id="使用-call-呼叫函式，可自己設定綁定物件"><a href="#使用-call-呼叫函式，可自己設定綁定物件" class="headerlink" title="使用 call 呼叫函式，可自己設定綁定物件"></a>使用 call 呼叫函式，可自己設定綁定物件</h2><pre><code>//call與apply的差別在於給予參數部分 apply用陣列給予參數，call用傳統寫法給予參數add.call({z:10}, 3, 4);   //綁定物件為{z:10},n1為3,n2為4 </code></pre>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200208-blog主題與設定</title>
      <link href="/2020/02/09/200208-blog%E4%B8%BB%E9%A1%8C%E8%88%87%E8%A8%AD%E5%AE%9A/"/>
      <url>/2020/02/09/200208-blog%E4%B8%BB%E9%A1%8C%E8%88%87%E8%A8%AD%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">https://theme-next.iissnan.com/</a>  Next主題</p><p><a href="https://hsiangfeng.github.io/hexo/20190518/3303379172/" target="_blank" rel="noopener">https://hsiangfeng.github.io/hexo/20190518/3303379172/</a>  Hexo Next 加入 FB 留言版</p><a id="more"></a><p>隱私權政策URL自動生成(申請FB SDK用)<br><a href="https://blog.niclin.tw/2019/01/05/%E5%A5%BD%E7%94%A8%E7%9A%84%E9%9A%B1%E7%A7%81%E6%AC%8A%E6%94%BF%E7%AD%96-url-%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">https://blog.niclin.tw/2019/01/05/%E5%A5%BD%E7%94%A8%E7%9A%84%E9%9A%B1%E7%A7%81%E6%AC%8A%E6%94%BF%E7%AD%96-url-%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90/</a></p><p>套用Hexo的主題”Next”<br>並修改主題內Config.yml的自訂設定</p><p>申請Facebook SDK<br>設定Facebook 留言板外掛</p>]]></content>
      
      
      <categories>
          
          <category> BLOG更新 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> BLOG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200205-學習紀錄 函式的綁定物件this基礎</title>
      <link href="/2020/02/05/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
      <url>/2020/02/05/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>函式的綁定物件  this 基礎<br><a href="https://www.youtube.com/watch?v=5Vi5idUkuyA&amp;list=PL-g0fdC5RMbpz9X__H5ycq1XcXxhfb5rk&amp;index=14" target="_blank" rel="noopener">https://www.youtube.com/watch?v=5Vi5idUkuyA&amp;list=PL-g0fdC5RMbpz9X__H5ycq1XcXxhfb5rk&amp;index=14</a></p><p>JavaScript 中的 function constructor 和關鍵字 new<br><a href="https://pjchender.blogspot.com/2016/06/javascriptfunction-constructornew.html" target="_blank" rel="noopener">https://pjchender.blogspot.com/2016/06/javascriptfunction-constructornew.html</a></p><a id="more"></a><p>//this 代表函式的”綁定物件,通常在函式中使用<br>    //不同的程式碼脈絡下,綁定物件代表不同的東西</p><h2 id="情況一-獨立的函式"><a href="#情況一-獨立的函式" class="headerlink" title="情況一:獨立的函式"></a>情況一:獨立的函式</h2><pre><code>function test(){    console.log(this); //this就是 window 物件    console.log(this.innerWidth); //印出視窗的寬度}test();</code></pre><h2 id="情況二-物件的方法"><a href="#情況二-物件的方法" class="headerlink" title="情況二:物件的方法"></a>情況二:物件的方法</h2><pre><code>let obj={    x:3,    test:function(){        console.log(this); //this就是方法所屬的物件本身        console.log(this.x);//印出物件的屬性 x    }};obj.test();</code></pre><h2 id="情況三-事件處理函式"><a href="#情況三-事件處理函式" class="headerlink" title="情況三:事件處理函式"></a>情況三:事件處理函式</h2><pre><code>document.addEventListener(&quot;click&quot;,function(){    console.log(this);      /*this 就是觸發事件的對象物件     例如在按鈕上註冊click物件 this就是代表那個按鈕 */    this.body.innerHTML=&quot;已點擊&quot;;  //舉例用法 點擊網頁會跳出&quot;已點擊&quot; 文字});</code></pre><h2 id="情況四-建構函式"><a href="#情況四-建構函式" class="headerlink" title="情況四:建構函式"></a>情況四:建構函式</h2><pre><code>function point(){    console.log(this);     /*this就是瀏覽器自動幫我們新建立好的空白物件 顯示為point{}*/    this.x=3;    this.y=4;}let p1=new point();console.log(p1); //結果為point{x:3,y:4}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
