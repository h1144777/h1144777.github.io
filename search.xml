<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>200222-類別物件基本概念</title>
      <link href="/2020/02/22/200222-%E9%A1%9E%E5%88%A5%E7%89%A9%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/02/22/200222-%E9%A1%9E%E5%88%A5%E7%89%A9%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>彭彭課程-類別物件 (Youtube會員)<br> <a href="https://training.pada-x.com/online_premium.htm" target="_blank" rel="noopener">https://training.pada-x.com/online_premium.htm</a></p> <a id="more"></a><h2 id="基本觀念"><a href="#基本觀念" class="headerlink" title="基本觀念"></a>基本觀念</h2><p>類別:設計圖。<br>物件:根據設計圖製造出來的實體。<br>例如一個展示盒的設計圖，可以用來產生無數個實體展示盒。<br>換句話說，一個類別設計，可以用來產生無數個物件實體。<br>基本類別設計會用到的關鍵字:class,constructor<br>產生物件實體會用到的關鍵字:new<br>物件實體以類別設計為基礎，但會依不同需求使內容有所差異。</p><h2 id="定義類別並產生物件"><a href="#定義類別並產生物件" class="headerlink" title="定義類別並產生物件"></a>定義類別並產生物件</h2><p>定義類別:</p><pre><code>class 類別名稱{}    *註:先有類別才能建立物件</code></pre><p>建立物件:</p><pre><code>new 類別名稱()</code></pre><p>例如:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定義一個類別</span><br><span class="line">class Car&#123;&#125; </span><br><span class="line">&#x2F;&#x2F;利用定義好的類別產生新物件，並放進變數中</span><br><span class="line">let car1&#x3D;new Car()</span><br></pre></td></tr></table></figure></p><h2 id="定義建構式-Constructor"><a href="#定義建構式-Constructor" class="headerlink" title="定義建構式(Constructor)"></a>定義建構式(Constructor)</h2><p>在類別中定義建構式:</p><pre><code>constructor(參數列表){    建構式的內部程式}</code></pre><p>例如:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Car&#123;               &#x2F;&#x2F;定義一個類別</span><br><span class="line">    constructor()&#123;       &#x2F;&#x2F;在類別中定義建構式</span><br><span class="line">        console.log(&quot;建構式被呼叫&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;利用已經定義的類別產生新物件</span><br><span class="line">let car1&#x3D;new Car();  &#x2F;&#x2F;呼叫建構式，產生新物件</span><br></pre></td></tr></table></figure><br>建構式:建立新物件時被呼叫的函式，若是沒特別寫，Javascript會內建<br>空白建構式constructor(){}，使程式可以運作。</p><h2 id="定義、存取屬性-Attribute"><a href="#定義、存取屬性-Attribute" class="headerlink" title="定義、存取屬性(Attribute)"></a>定義、存取屬性(Attribute)</h2><p>屬性:用來描述物件的個別差異。<br>在建構式中建立屬性:</p><pre><code>constructor(參數列表){    this.屬性名稱=初始資料;}</code></pre><p>例如:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Car&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.color&#x3D;&quot;red&quot;;   &#x2F;&#x2F;建立新屬性color，資料為red。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;利用已經定義的類別產生新物件</span><br><span class="line">let car1&#x3D;new Car();  &#x2F;&#x2F;新物件擁有color屬性，資料為red。</span><br></pre></td></tr></table></figure><br>也可透過參數，彈性的在建立物件時提供資料:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Car&#123;</span><br><span class="line">    constructor(color)&#123;</span><br><span class="line">        this.color&#x3D;color;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;利用已經定義的類別產生新物件</span><br><span class="line">let car1&#x3D;new Car(&quot;blue&quot;);  &#x2F;&#x2F;新物件擁有color屬性，資料為blue。</span><br><span class="line">let car2&#x3D;new Car(&quot;green&quot;);  &#x2F;&#x2F;新物件擁有color屬性，資料為green。</span><br></pre></td></tr></table></figure><br>存取物件屬性:</p><pre><code>物件.屬性名稱物件.屬性名稱=新的資料</code></pre><p>例如:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Car&#123;</span><br><span class="line">    constructor(color)&#123;</span><br><span class="line">        this.color&#x3D;color;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let car1&#x3D;new Car(&quot;blue&quot;);  &#x2F;&#x2F;新物件擁有color屬性，資料為blue。</span><br><span class="line">console.log(car1.color);   &#x2F;&#x2F;取得屬性資料，印出blue</span><br><span class="line">car1.color&#x3D;&quot;red&quot;;          &#x2F;&#x2F;更新屬性資料</span><br><span class="line">console.log(car1.color);   &#x2F;&#x2F;取得新的屬性物件，印出red</span><br></pre></td></tr></table></figure></p><h2 id="定義、呼叫方法-Method"><a href="#定義、呼叫方法-Method" class="headerlink" title="定義、呼叫方法(Method)"></a>定義、呼叫方法(Method)</h2><p>方法:用來描述物件可以做的事，與物件綁定的函式。<br>換句話說，方法就是綁定在物件上面的函式。</p><p>在類別中建立方法:</p><pre><code>方法的名稱(參數列表){    內部的程式碼}</code></pre><p>例如:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Car&#123;</span><br><span class="line">    constructor(color)&#123;</span><br><span class="line">        this.color&#x3D;color;   </span><br><span class="line">    &#125;</span><br><span class="line">    run()&#123;      &#x2F;&#x2F;定義一個run方法，透過物件呼叫並執行內部程式碼。</span><br><span class="line">        console.log(&quot;Running&quot;);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let car1&#x3D;new Car(&quot;blue&quot;)  &#x2F;&#x2F;產生新物件，物件擁有color屬性與run方法。</span><br></pre></td></tr></table></figure><br>呼叫物件方法:</p><pre><code>物件.方法名稱(參數資料)</code></pre><p>例如:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Car&#123;</span><br><span class="line">    constructor(color)&#123;</span><br><span class="line">        this.color&#x3D;color;   </span><br><span class="line">    &#125;</span><br><span class="line">    run()&#123;      &#x2F;&#x2F;定義一個run方法，透過物件呼叫並執行內部程式碼。</span><br><span class="line">        console.log(&quot;Running&quot;);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let car1&#x3D;new Car(&quot;blue&quot;)  &#x2F;&#x2F;產生新物件，物件擁有color屬性與run方法。</span><br><span class="line">car1.run();  &#x2F;&#x2F;呼叫run方法，執行run內部程式，印出Running。</span><br></pre></td></tr></table></figure></p><p>在物件方法中使用this代表綁定物件:</p><p>例如:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Car&#123;</span><br><span class="line">    constructor(color)&#123;</span><br><span class="line">        this.color&#x3D;color;   </span><br><span class="line">    &#125;</span><br><span class="line">    run()&#123;     </span><br><span class="line">        console.log(&quot;Car&quot;+this.color+&quot;Running&quot;);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let car1&#x3D;new Car(&quot;blue&quot;)  </span><br><span class="line">car1.run();  &#x2F;&#x2F;印出 Car blue Running</span><br></pre></td></tr></table></figure></p><h2 id="物件屬性、方法的綜合操作"><a href="#物件屬性、方法的綜合操作" class="headerlink" title="物件屬性、方法的綜合操作"></a>物件屬性、方法的綜合操作</h2><p>以車輛做為比喻:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Car&#123;</span><br><span class="line">    construtcor(color)&#123;               &#x2F;&#x2F;建構式</span><br><span class="line">        this.color&#x3D;color;</span><br><span class="line">        this.speed&#x3D;0;                 &#x2F;&#x2F;初始資料，車輛的初始速度為0</span><br><span class="line">    &#125;</span><br><span class="line">    run(speed)&#123;                       &#x2F;&#x2F;方法</span><br><span class="line">        this.speed&#x3D;speed;             &#x2F;&#x2F;更新車輛速度(給予資料彈性輸入)</span><br><span class="line">        console.log(&quot;Car&quot;+this.color+&quot;Running at&quot;+this.speed+&quot;KM&#x2F;HR&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    stop()&#123;</span><br><span class="line">        this.speed&#x3D;0;                 &#x2F;&#x2F;更新車輛速度</span><br><span class="line">        console.log(&quot;Car&quot;+this.color+&quot;stopped);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let car1&#x3D;new Car(&quot;blue&quot;);             &#x2F;&#x2F;產生新物件並放入變數中</span><br><span class="line">car1.run(50);                         &#x2F;&#x2F;印出Car blue Running at 50KM&#x2F;HR</span><br><span class="line">car1.stop();                          &#x2F;&#x2F;印出 Car blue stopped</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200219-參數的預設值</title>
      <link href="/2020/02/19/200219-ES6-%E5%8F%83%E6%95%B8%E7%9A%84%E9%A0%90%E8%A8%AD%E5%80%BC/"/>
      <url>/2020/02/19/200219-ES6-%E5%8F%83%E6%95%B8%E7%9A%84%E9%A0%90%E8%A8%AD%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>彭彭課程-參數預設值 (Youtube會員)<br> <a href="https://training.pada-x.com/online_premium.htm" target="_blank" rel="noopener">https://training.pada-x.com/online_premium.htm</a></p><p>函式參數預設值 - 基礎範例<br><a href="https://ithelp.ithome.com.tw/articles/10213774" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10213774</a></p><a id="more"></a><h2 id="原有方式"><a href="#原有方式" class="headerlink" title="原有方式"></a>原有方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function show(message)&#123;</span><br><span class="line">    if(typeof message&#x3D;&#x3D;&#x3D;&quot;undefined&quot;)&#123;  &#x2F;&#x2F;未給定message資料</span><br><span class="line">        message&#x3D;&quot;預設值&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(message);</span><br><span class="line">&#125;</span><br><span class="line">show(&quot;Hello&quot;); &#x2F;&#x2F;顯示Hello</span><br><span class="line">show();  &#x2F;&#x2F;顯示預設值</span><br></pre></td></tr></table></figure><h2 id="ES6的作法"><a href="#ES6的作法" class="headerlink" title="ES6的作法"></a>ES6的作法</h2><p>若未給定message資料，直接採用=後方指定的資料</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function show(message&#x3D;&quot;預設值&quot;)&#123;</span><br><span class="line">    alert(message);</span><br><span class="line">&#125;</span><br><span class="line">show(&quot;Hello&quot;); &#x2F;&#x2F;顯示Hello</span><br><span class="line">show();  &#x2F;&#x2F;顯示預設值</span><br></pre></td></tr></table></figure><p>也可使用箭頭函式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let show&#x3D;(message&#x3D;&quot;預設值&quot;)&#x3D;&gt;&#123;</span><br><span class="line">    alert(message);</span><br><span class="line">&#125;;</span><br><span class="line">show(&quot;Hello&quot;); &#x2F;&#x2F;顯示Hello</span><br><span class="line">show();  &#x2F;&#x2F;顯示預設值</span><br></pre></td></tr></table></figure><h2 id="範例一"><a href="#範例一" class="headerlink" title="範例一:"></a>範例一:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function multiply(n1, n2&#x3D;1)&#123;</span><br><span class="line">    return n1*n2;</span><br><span class="line">&#125;</span><br><span class="line">multiply(3,4); &#x2F;&#x2F;回傳12</span><br><span class="line">multiply(5); &#x2F;&#x2F;回傳5</span><br></pre></td></tr></table></figure><h2 id="範例一-箭頭函式"><a href="#範例一-箭頭函式" class="headerlink" title="範例一 箭頭函式:"></a>範例一 箭頭函式:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let multiply&#x3D;(n1,n2&#x3D;1)&#x3D;&gt;(n1*n2);  &#x2F;&#x2F;註:箭頭函式後方不用加上return,使用小括號會直接回傳</span><br><span class="line">multiply(3,4); &#x2F;&#x2F;回傳12</span><br><span class="line">multiply(5); &#x2F;&#x2F;回傳5</span><br></pre></td></tr></table></figure><h2 id="範例二-後面的參數可使用前面的參數名稱"><a href="#範例二-後面的參數可使用前面的參數名稱" class="headerlink" title="範例二:後面的參數可使用前面的參數名稱"></a>範例二:後面的參數可使用前面的參數名稱</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function combine(first&#x3D;&quot;Louie&quot;,last&#x3D;&quot;Chen&quot;,name&#x3D;first+&quot; &quot;+last)&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">&#125;</span><br><span class="line">combine(&quot;祥祥&quot;,&quot;陳&quot;); &#x2F;&#x2F;顯示祥祥 陳</span><br><span class="line">combine(&quot;祥祥&quot;);  &#x2F;&#x2F;顯示 祥祥 Chen</span><br><span class="line">combine();  &#x2F;&#x2F;顯示Louie Chen</span><br></pre></td></tr></table></figure><h2 id="範例二-箭頭函數"><a href="#範例二-箭頭函數" class="headerlink" title="範例二:箭頭函數"></a>範例二:箭頭函數</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let combibe&#x3D;(first&#x3D;&quot;Louie&quot;,last&#x3D;&quot;Chen&quot;,name&#x3D;first+&quot; &quot;+last)&#x3D;&gt;&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">&#125;</span><br><span class="line">combine(&quot;祥祥&quot;,&quot;陳&quot;); &#x2F;&#x2F;顯示祥祥 陳</span><br><span class="line">combine(&quot;祥祥&quot;);  &#x2F;&#x2F;顯示 祥祥 Chen</span><br><span class="line">combine();  &#x2F;&#x2F;顯示Louie Chen</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200216-學習紀錄-ES6-箭頭函式基本認識</title>
      <link href="/2020/02/16/200216-%E7%AE%AD%E9%A0%AD%E5%87%BD%E5%BC%8F%E5%9F%BA%E6%9C%AC%E8%AA%8D%E8%AD%98/"/>
      <url>/2020/02/16/200216-%E7%AE%AD%E9%A0%AD%E5%87%BD%E5%BC%8F%E5%9F%BA%E6%9C%AC%E8%AA%8D%E8%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>箭頭函式(尚未看完)<br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/arrow_function.html" target="_blank" rel="noopener">https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/arrow_function.html</a></p><p>鐵人賽：箭頭函式 (Arrow functions)  (尚未看完)<br><a href="https://wcc723.github.io/javascript/2017/12/21/javascript-es6-arrow-function/" target="_blank" rel="noopener">https://wcc723.github.io/javascript/2017/12/21/javascript-es6-arrow-function/</a></p><p>彭彭課程-箭頭函式 (Youtube會員)<br> <a href="https://training.pada-x.com/online_premium.htm" target="_blank" rel="noopener">https://training.pada-x.com/online_premium.htm</a></p> <a id="more"></a><h2 id="1-參數列表-gt-回傳值"><a href="#1-參數列表-gt-回傳值" class="headerlink" title="1.(參數列表)=&gt;(回傳值)"></a>1.(參數列表)=&gt;(回傳值)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;傳統的函式宣告</span><br><span class="line">let add&#x3D;function(n1+n2)&#123;</span><br><span class="line">    return n1+n2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;箭頭函式的寫法1</span><br><span class="line">let add&#x3D;(n1,n2)&#x3D;&gt;&#123;</span><br><span class="line">    return n1+n2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-參數列表-gt-函式內部程式"><a href="#2-參數列表-gt-函式內部程式" class="headerlink" title="2.(參數列表)=&gt;{函式內部程式}"></a>2.(參數列表)=&gt;{函式內部程式}</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;傳統的函示宣告</span><br><span class="line">let add&#x3D;function(n1+n2)&#123;</span><br><span class="line">    return n1+n2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;箭頭函式的寫法2</span><br><span class="line">let add&#x3D;(n1,n2)&#x3D;&gt;&#123;</span><br><span class="line">    return n1+n2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="延伸範例"><a href="#延伸範例" class="headerlink" title="延伸範例:"></a>延伸範例:</h2><p>1.<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let f&#x3D;()&#x3D;&gt;(5);    &#x2F;&#x2F;f&#x3D;5</span><br><span class="line">let result&#x3D;f();   &#x2F;&#x2F;回傳5放進result中</span><br><span class="line">console.log(result);  </span><br><span class="line">&#x2F;&#x2F;請問result變數中的資料是?</span><br><span class="line">&#x2F;&#x2F;result&#x3D;5</span><br></pre></td></tr></table></figure><br>2.<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let f&#x3D;(message)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(message);   &#x2F;&#x2F;目前會顯示undifined 因為沒有回傳值</span><br><span class="line">&#125;;</span><br><span class="line">f(&quot;Hello,Arrow&quot;);</span><br><span class="line">&#x2F;&#x2F;請問呼叫f函式之後的效果是?  </span><br><span class="line">&#x2F;&#x2F;呼叫函式中，因為()內有加入資料,所以會回傳並透過console.log顯示 Hello,Arrow</span><br></pre></td></tr></table></figure></p><h2 id="匿名函式"><a href="#匿名函式" class="headerlink" title="匿名函式:"></a>匿名函式:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在排程中使用&quot;傳統方式&quot;撰寫&quot;匿名函式&quot;</span><br><span class="line">   setTimeout(function()&#123;</span><br><span class="line">       console.log(&quot;過了一秒&quot;);</span><br><span class="line">   &#125;,1000);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在排程中使用&quot;箭頭函式&quot;，撰寫&quot;匿名函式&quot;</span><br><span class="line">   setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">       console.log(&quot;過了一秒&quot;);</span><br><span class="line">   &#125;,1000);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200213-詳解let、const、var的差異 (JS ES6)</title>
      <link href="/2020/02/13/200213-%E8%A9%B3%E8%A7%A3let%E3%80%81const%E3%80%81var%E7%9A%84%E5%B7%AE%E7%95%B0/"/>
      <url>/2020/02/13/200213-%E8%A9%B3%E8%A7%A3let%E3%80%81const%E3%80%81var%E7%9A%84%E5%B7%AE%E7%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>彭彭課程-詳解let、const、var的差異 (Youtube會員)<br> <a href="https://training.pada-x.com/online_premium.htm" target="_blank" rel="noopener">https://training.pada-x.com/online_premium.htm</a><br>[ES6-重點紀錄] 宣告方式 let、const<br><a href="https://ithelp.ithome.com.tw/articles/10192677" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10192677</a><br>變數與常數<br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/var_const_naming.html" target="_blank" rel="noopener">https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/var_const_naming.html</a><br>[筆記] JavaScript ES6 中使用 const 宣告常數<br><a href="https://pjchender.blogspot.com/2017/01/const.html" target="_blank" rel="noopener">https://pjchender.blogspot.com/2017/01/const.html</a></p><a id="more"></a><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>使用var宣告變數，變數的scope(範圍)以函式區塊分界。<br>程式片段一:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var i&#x3D;0;i&lt;3;i++)&#123;        </span><br><span class="line">    console.log(i)          </span><br><span class="line">&#125;        </span><br><span class="line">console.log(i)  &#x2F;&#x2F;印出3</span><br></pre></td></tr></table></figure><br>雖然i宣告在for迴圈內，但for為判斷式，此程式片段都還是屬於在同一範圍，所以可以叫出i。</p><p>程式片段二:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">    for(var i&#x3D;0;i&lt;3;i++)&#123;        </span><br><span class="line">    console.log(i)          </span><br><span class="line">   &#125;        </span><br><span class="line">&#125;</span><br><span class="line">console.log(i)  &#x2F;&#x2F;錯誤，找不到變數i</span><br></pre></td></tr></table></figure><br>此程式片段有函式，函式內為一個scope，函式外為另一個scope，i宣告在函式內，所以函式外的<br>i找不到變數。    </p><hr><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>使用let宣告變數，分界較嚴格，變數的scope以程式區塊(大括號)分界<br>程式片段一:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(let i&#x3D;0;i&lt;3;i++)&#123;        </span><br><span class="line">    console.log(i)          </span><br><span class="line">&#125;        </span><br><span class="line">console.log(i)  &#x2F;&#x2F;錯誤 找不到變數i</span><br></pre></td></tr></table></figure><br>程式片段二:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">    for(let i&#x3D;0;i&lt;3;i++)&#123;        </span><br><span class="line">    console.log(i)          </span><br><span class="line">   &#125;        </span><br><span class="line">&#125;</span><br><span class="line">console.log(i)  &#x2F;&#x2F;錯誤，找不到變數i</span><br></pre></td></tr></table></figure><br>使用let宣告變數，不僅函式會產生區隔，連判斷式(ex:for…)也會產生新的scope</p><hr><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>使用const宣告常數，常數的資料不能變動<br>例如:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var v&#x3D;3;</span><br><span class="line">v&#x3D;&quot;Hello World&quot;;  &#x2F;&#x2F;變數中的資料可變動</span><br><span class="line"></span><br><span class="line">let l;    &#x2F;&#x2F;宣告變數可以暫時不給資料</span><br><span class="line">l&#x3D;0;      &#x2F;&#x2F;變數中的資料可變動</span><br><span class="line"></span><br><span class="line">const x;  &#x2F;&#x2F;錯誤，常數宣告時一定要給資料</span><br><span class="line"></span><br><span class="line">const c&#x3D;100;  &#x2F;&#x2F;正確，宣告常數，同時給定資料</span><br><span class="line">c&#x3D;50;     &#x2F;&#x2F;錯誤，不能更動常數中的資料</span><br></pre></td></tr></table></figure></p><h2 id="使用-const-在宣告陣列或物件時需要留意的地方"><a href="#使用-const-在宣告陣列或物件時需要留意的地方" class="headerlink" title="使用 const 在宣告陣列或物件時需要留意的地方"></a>使用 const 在宣告陣列或物件時需要留意的地方</h2><p>1.當用const宣告常數，並用push推入一個陣列的值時，並不會有錯誤的情形。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const arr&#x3D; [&quot;Hello&quot;, &quot;h1144777&quot;]</span><br><span class="line">console.log(arr);  &#x2F;&#x2F; [&quot;Hello&quot;, &quot;h1144777&quot;]</span><br><span class="line"></span><br><span class="line">arr.push(&quot;welcome&quot;)</span><br><span class="line">console.log(arr);&#x2F;&#x2F; [&quot;Hello&quot;, &quot;h1144777&quot;, &quot;welcome&quot;]</span><br></pre></td></tr></table></figure><br>  因為在JS中陣列(array)和物件(object)皆屬於 “參考型別(reference type)” &lt;=待學習,<br>  仍然指稱到的是同一個記憶體位置，同樣道理，如果使用的是物件(object)，一樣不會有錯誤<br>  的情形產生。</p><p>2.如果使用object literal( 大括號{} )的方式修改物件內容，對於JS引擎來說等於建立新物<br>件，也就是他會將這個物件存到另一個記憶體位置，就是這個常數的值改變了，就會出現錯誤訊息</p><p>物件部分:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const obj &#x3D; &#123;</span><br><span class="line">    name: &quot;h1144777&quot;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj);  &#x2F;&#x2F; &#123;name:h1144777&#125;</span><br><span class="line"></span><br><span class="line">obj &#x3D; &#123;</span><br><span class="line">    name: &quot;abcd&quot;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj);  &#x2F;&#x2F;錯誤</span><br></pre></td></tr></table></figure><p>陣列部分:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const arr &#x3D; [23, 24, 25];</span><br><span class="line">console.log(arr);  &#x2F;&#x2F;[23, 24, 25]</span><br><span class="line"></span><br><span class="line">arr &#x3D; [34, 35, 36];</span><br><span class="line">console.log(arr);  &#x2F;&#x2F;錯誤</span><br></pre></td></tr></table></figure><h2 id="延伸觀念"><a href="#延伸觀念" class="headerlink" title="延伸觀念"></a>延伸觀念</h2><p>1.什麼是function scope<br>function scope指的是函式範圍，用var宣告變數後，被宣告的這個變數在此函式範圍內都有效，變數有效<br>範圍越大越難管控變數，也越有可能造成Bug</p><p>2.什麼是block scope<br>block scope為區塊範圍，使用let宣告變數或是用const宣告常數，被宣告的變數或常數僅在區塊範圍內有效，也就是僅在限定的{ }內有效。</p>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200213-加入Disqus留言板</title>
      <link href="/2020/02/13/200213-%E5%8A%A0%E5%85%A5Disqus%E7%95%99%E8%A8%80%E6%9D%BF/"/>
      <url>/2020/02/13/200213-%E5%8A%A0%E5%85%A5Disqus%E7%95%99%E8%A8%80%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p><a href="https://chenlifei.tech/posts/8838407/" target="_blank" rel="noopener">https://chenlifei.tech/posts/8838407/</a><br>申請Disqus教學</p><p><a href="https://www.wpchen.net/zh/posts/disqus#_Disqus-4" target="_blank" rel="noopener">https://www.wpchen.net/zh/posts/disqus#_Disqus-4</a><br>更改留言板語系</p><a id="more"></a><p>1.進入Disqus官網申請帳號並設定shortname<br>2.開啟佈景主題Next內的_config.yml設定Disqus (主題內建)<br>3.找到Disqus.swig 並修改留言板語系</p>]]></content>
      
      
      <categories>
          
          <category> BLOG更新 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLOG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200211-學習紀錄 函式的綁定物件this進階</title>
      <link href="/2020/02/11/200211-this%E9%80%B2%E9%9A%8E/"/>
      <url>/2020/02/11/200211-this%E9%80%B2%E9%9A%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>JavaScript 網頁前端工程進階：函式的綁定物件 this - 進階篇</p><p><a href="https://www.youtube.com/watch?v=NHliVGQef-4&amp;list=PL-g0fdC5RMbpz9X__H5ycq1XcXxhfb5rk&amp;index=16&amp;t=411s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=NHliVGQef-4&amp;list=PL-g0fdC5RMbpz9X__H5ycq1XcXxhfb5rk&amp;index=16&amp;t=411s</a></p><a id="more"></a><p>函式呼叫<br>1.基本呼叫:<br>    函式名稱(參數資料)<br>2.使用apply呼叫函式:<br>    函式名稱.apply(綁定物件,[參數資料,…])<br>3.使用call呼叫函式<br>    函式名稱.call(綁定物件,參數資料…)    </p><p>this代表函式的”綁定物件”，通常在函式中使用<br>不同的程式碼脈絡下，”綁定函式”代表不同的東西</p><p>基礎:了解綁定物件在不同基本脈絡下的變化<br>情況一:獨立的函式<br>情況二:物件的方法<br>情況三:事件處理函式<br>情況四:建構函式</p><h1 id="進階-自訂的綁定物件"><a href="#進階-自訂的綁定物件" class="headerlink" title="進階:自訂的綁定物件"></a>進階:自訂的綁定物件</h1><hr><h2 id="使用-bind-重新綁定物件"><a href="#使用-bind-重新綁定物件" class="headerlink" title="使用 bind 重新綁定物件"></a>使用 bind 重新綁定物件</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">    console.log(&quot;綁定物件&quot;,this);</span><br><span class="line">&#125;</span><br><span class="line">test();      &#x2F;&#x2F;此時this綁定物件為window</span><br><span class="line">let test2&#x3D;test.bind(&#123;x:3&#125;);</span><br><span class="line">test2();     &#x2F;&#x2F;重新綁定後舊物件會被覆蓋  此時this綁定物件為&#123;x:3&#125;  </span><br><span class="line">let test3&#x3D;test.bind(document);</span><br><span class="line">test3();     &#x2F;&#x2F;重新綁定後舊物件會被覆蓋  此時this綁定物件為document</span><br></pre></td></tr></table></figure></code></pre><h2 id="使用-apply-呼叫函式，可自己設定綁定物件"><a href="#使用-apply-呼叫函式，可自己設定綁定物件" class="headerlink" title="使用 apply 呼叫函式，可自己設定綁定物件"></a>使用 apply 呼叫函式，可自己設定綁定物件</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function add(n1, n2)&#123;</span><br><span class="line">     console.log(&quot;結果&quot;, n1+n2);    &#x2F;&#x2F;結果7</span><br><span class="line">     console.log(&quot;綁定物件&quot;, this);    &#x2F;&#x2F;綁定物件window</span><br><span class="line">&#125;</span><br><span class="line">add(3,4);    &#x2F;&#x2F;基本的函式呼叫，無法自己設定綁定物件</span><br><span class="line">add.apply(&#123;y:4&#125;,[4, 5]); &#x2F;&#x2F;&#123;y:4&#125;為綁定物件，[4, 5]為陣列，代表原來參數，4放到n1，5放到n2</span><br><span class="line">add.apply(document, [5, 6]);   &#x2F;&#x2F;綁定物件為document,n1為5,n2為6</span><br></pre></td></tr></table></figure></code></pre><h2 id="使用-call-呼叫函式，可自己設定綁定物件"><a href="#使用-call-呼叫函式，可自己設定綁定物件" class="headerlink" title="使用 call 呼叫函式，可自己設定綁定物件"></a>使用 call 呼叫函式，可自己設定綁定物件</h2><pre><code>//call與apply的差別在於給予參數部分 apply用陣列給予參數，call用傳統寫法給予參數add.call({z:10}, 3, 4);   //綁定物件為{z:10},n1為3,n2為4 </code></pre>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200208-blog主題與設定</title>
      <link href="/2020/02/09/200208-blog%E4%B8%BB%E9%A1%8C%E8%88%87%E8%A8%AD%E5%AE%9A/"/>
      <url>/2020/02/09/200208-blog%E4%B8%BB%E9%A1%8C%E8%88%87%E8%A8%AD%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">https://theme-next.iissnan.com/</a>  Next主題</p><p><a href="https://hsiangfeng.github.io/hexo/20190518/3303379172/" target="_blank" rel="noopener">https://hsiangfeng.github.io/hexo/20190518/3303379172/</a>  Hexo Next 加入 FB 留言版</p><a id="more"></a><p>隱私權政策URL自動生成(申請FB SDK用)<br><a href="https://blog.niclin.tw/2019/01/05/%E5%A5%BD%E7%94%A8%E7%9A%84%E9%9A%B1%E7%A7%81%E6%AC%8A%E6%94%BF%E7%AD%96-url-%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">https://blog.niclin.tw/2019/01/05/%E5%A5%BD%E7%94%A8%E7%9A%84%E9%9A%B1%E7%A7%81%E6%AC%8A%E6%94%BF%E7%AD%96-url-%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90/</a></p><p>套用Hexo的主題”Next”<br>並修改主題內Config.yml的自訂設定</p><p>申請Facebook SDK<br>設定Facebook 留言板外掛</p>]]></content>
      
      
      <categories>
          
          <category> BLOG更新 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLOG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200205-學習紀錄 函式的綁定物件this基礎</title>
      <link href="/2020/02/05/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
      <url>/2020/02/05/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/</url>
      
        <content type="html"><![CDATA[<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h2><p>函式的綁定物件  this 基礎<br><a href="https://www.youtube.com/watch?v=5Vi5idUkuyA&amp;list=PL-g0fdC5RMbpz9X__H5ycq1XcXxhfb5rk&amp;index=14" target="_blank" rel="noopener">https://www.youtube.com/watch?v=5Vi5idUkuyA&amp;list=PL-g0fdC5RMbpz9X__H5ycq1XcXxhfb5rk&amp;index=14</a></p><p>JavaScript 中的 function constructor 和關鍵字 new<br><a href="https://pjchender.blogspot.com/2016/06/javascriptfunction-constructornew.html" target="_blank" rel="noopener">https://pjchender.blogspot.com/2016/06/javascriptfunction-constructornew.html</a></p><a id="more"></a><p>//this 代表函式的”綁定物件,通常在函式中使用<br>    //不同的程式碼脈絡下,綁定物件代表不同的東西</p><h2 id="情況一-獨立的函式"><a href="#情況一-獨立的函式" class="headerlink" title="情況一:獨立的函式"></a>情況一:獨立的函式</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">    console.log(this); &#x2F;&#x2F;this就是 window 物件</span><br><span class="line">    console.log(this.innerWidth); &#x2F;&#x2F;印出視窗的寬度</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></code></pre><h2 id="情況二-物件的方法"><a href="#情況二-物件的方法" class="headerlink" title="情況二:物件的方法"></a>情況二:物件的方法</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let obj&#x3D;&#123;</span><br><span class="line">    x:3,</span><br><span class="line">    test:function()&#123;</span><br><span class="line">        console.log(this); &#x2F;&#x2F;this就是方法所屬的物件本身</span><br><span class="line">        console.log(this.x);&#x2F;&#x2F;印出物件的屬性 x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.test();</span><br></pre></td></tr></table></figure></code></pre><h2 id="情況三-事件處理函式"><a href="#情況三-事件處理函式" class="headerlink" title="情況三:事件處理函式"></a>情況三:事件處理函式</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">    console.log(this);  </span><br><span class="line">    &#x2F;*this 就是觸發事件的對象物件 </span><br><span class="line">    例如在按鈕上註冊click物件 this就是代表那個按鈕 *&#x2F;</span><br><span class="line">    this.body.innerHTML&#x3D;&quot;已點擊&quot;;  &#x2F;&#x2F;舉例用法 點擊網頁會跳出&quot;已點擊&quot; 文字</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></code></pre><h2 id="情況四-建構函式"><a href="#情況四-建構函式" class="headerlink" title="情況四:建構函式"></a>情況四:建構函式</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function point()&#123;</span><br><span class="line">    console.log(this); </span><br><span class="line">    &#x2F;*this就是瀏覽器自動幫我們新建立好的空白物件 顯示為point&#123;&#125;*&#x2F;</span><br><span class="line">    this.x&#x3D;3;</span><br><span class="line">    this.y&#x3D;4;</span><br><span class="line">&#125;</span><br><span class="line">let p1&#x3D;new point();</span><br><span class="line">console.log(p1); &#x2F;&#x2F;結果為point&#123;x:3,y:4&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> 學習紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
